{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport React__default, { createElement, createContext, useContext, useRef, useEffect, useState, useCallback } from 'react';\nimport { fieldSubscriptionItems, formSubscriptionItems, createForm, version as version$1 } from 'final-form'; // shared logic between components that use either render prop,\n// children render function, or component prop\n\nfunction renderComponent(props, name) {\n  var render = props.render,\n      children = props.children,\n      component = props.component,\n      rest = _objectWithoutPropertiesLoose(props, [\"render\", \"children\", \"component\"]);\n\n  if (component) {\n    return createElement(component, _extends({}, rest, {\n      children: children,\n      render: render\n    }));\n  }\n\n  if (render) {\n    return render(children === undefined ? rest : _extends({}, rest, {\n      children: children\n    })); // inject children back in\n  }\n\n  if (typeof children !== 'function') {\n    // istanbul ignore next\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(\"Warning: Must specify either a render prop, a render function as children, or a component prop to \" + name);\n    }\n\n    return null; // warning will alert developer to their mistake\n  }\n\n  return children(rest);\n}\n\nfunction flattenSubscription(subscription) {\n  if (subscription === void 0) {\n    subscription = {};\n  }\n\n  return Object.keys(subscription).filter(function (key) {\n    return subscription[key] === true;\n  });\n}\n\nvar isReactNative = typeof window !== 'undefined' && window.navigator && window.navigator.product && window.navigator.product === 'ReactNative';\n\nvar getSelectedValues = function getSelectedValues(options) {\n  var result = [];\n\n  if (options) {\n    for (var index = 0; index < options.length; index++) {\n      var option = options[index];\n\n      if (option.selected) {\n        result.push(option.value);\n      }\n    }\n  }\n\n  return result;\n};\n\nvar getValue = function getValue(event, currentValue, valueProp, isReactNative) {\n  if (!isReactNative && event.nativeEvent && event.nativeEvent.text !== undefined) {\n    return event.nativeEvent.text;\n  }\n\n  if (isReactNative && event.nativeEvent) {\n    return event.nativeEvent.text;\n  }\n\n  var detypedEvent = event;\n  var _detypedEvent$target = detypedEvent.target,\n      type = _detypedEvent$target.type,\n      value = _detypedEvent$target.value,\n      checked = _detypedEvent$target.checked;\n\n  switch (type) {\n    case 'checkbox':\n      if (valueProp !== undefined) {\n        // we are maintaining an array, not just a boolean\n        if (checked) {\n          // add value to current array value\n          return Array.isArray(currentValue) ? currentValue.concat(valueProp) : [valueProp];\n        } else {\n          // remove value from current array value\n          if (!Array.isArray(currentValue)) {\n            return currentValue;\n          }\n\n          var index = currentValue.indexOf(valueProp);\n\n          if (index < 0) {\n            return currentValue;\n          } else {\n            return currentValue.slice(0, index).concat(currentValue.slice(index + 1));\n          }\n        }\n      } else {\n        // it's just a boolean\n        return !!checked;\n      }\n\n    case 'select-multiple':\n      return getSelectedValues(event.target.options);\n\n    default:\n      return value;\n  }\n};\n\nvar ReactFinalFormContext = createContext();\n\nvar useForm = function useForm(componentName) {\n  var form = useContext(ReactFinalFormContext);\n\n  if (!form) {\n    throw new Error(\"Warning: \" + (componentName || 'useForm') + \" must be used inside of a <Form> component\");\n  }\n\n  return form;\n};\n\nvar all = fieldSubscriptionItems.reduce(function (result, key) {\n  result[key] = true;\n  return result;\n}, {});\n\nvar defaultFormat = function defaultFormat(value, name) {\n  return value === undefined ? '' : value;\n};\n\nvar defaultParse = function defaultParse(value, name) {\n  return value === '' ? undefined : value;\n};\n\nvar useField = function useField(name, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      allowNull = _ref.allowNull,\n      component = _ref.component,\n      defaultValue = _ref.defaultValue,\n      _ref$format = _ref.format,\n      format = _ref$format === void 0 ? defaultFormat : _ref$format,\n      formatOnBlur = _ref.formatOnBlur,\n      initialValue = _ref.initialValue,\n      isEqual = _ref.isEqual,\n      multiple = _ref.multiple,\n      _ref$parse = _ref.parse,\n      parse = _ref$parse === void 0 ? defaultParse : _ref$parse,\n      subscription = _ref.subscription,\n      type = _ref.type,\n      validate = _ref.validate,\n      validateFields = _ref.validateFields,\n      _value = _ref.value;\n\n  var form = useForm('useField'); // keep ref to most recent copy of validate function\n\n  var validateRef = useRef(validate);\n  useEffect(function () {\n    validateRef.current = validate;\n  });\n\n  var register = function register(callback) {\n    return form.registerField(name, callback, subscription || all, {\n      defaultValue: defaultValue,\n      getValidator: function getValidator() {\n        return validateRef.current;\n      },\n      initialValue: initialValue,\n      isEqual: isEqual,\n      validateFields: validateFields\n    });\n  };\n\n  var firstRender = useRef(true); // synchronously register and unregister to query field state for our subscription on first render\n\n  var _React$useState = useState(function () {\n    var initialState = {};\n    register(function (state) {\n      initialState = state;\n    })();\n    return initialState;\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  var flattenedSubscription = flattenSubscription(subscription || all); // useDependenciesDebugger({\n  //   name,\n  //   defaultValue,\n  //   validate,\n  //   initialValue,\n  //   isEqual,\n  //   validateFields,\n  //   form\n  // })\n\n  useEffect(function () {\n    return register(function (state) {\n      if (firstRender.current) {\n        firstRender.current = false;\n      } else {\n        setState(state);\n      }\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [name, defaultValue, // If we want to allow inline fat-arrow field-level validation functions, we\n  // cannot reregister field every time validate function !==.\n  // validate,\n  initialValue, isEqual, validateFields].concat(flattenedSubscription));\n  var handlers = {\n    onBlur: useCallback(function (event) {\n      // this is to appease the Flow gods\n      // istanbul ignore next\n      if (state) {\n        state.blur();\n\n        if (format && formatOnBlur) {\n          state.change(format(state.value, state.name));\n        }\n      }\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    [state.name, state.value, format, formatOnBlur]),\n    onChange: useCallback(function (event) {\n      // istanbul ignore next\n      if (process.env.NODE_ENV !== 'production' && event && event.target) {\n        var targetType = event.target.type;\n        var unknown = ~['checkbox', 'radio', 'select-multiple'].indexOf(targetType) && !type;\n\n        var _value2 = targetType === 'select-multiple' ? state.value : _value;\n\n        if (unknown) {\n          console.error(\"Warning: You must pass `type=\\\"\" + (targetType === 'select-multiple' ? 'select' : targetType) + \"\\\"` prop to your Field(\" + name + \") component.\\n\" + (\"Without it we don't know how to unpack your `value` prop - \" + (Array.isArray(_value2) ? \"[\" + _value2 + \"]\" : \"\\\"\" + _value2 + \"\\\"\") + \".\"));\n        }\n      }\n\n      var value = event && event.target ? getValue(event, state.value, _value, isReactNative) : event;\n      state.change(parse ? parse(value, name) : value);\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    [_value, name, parse, state.value, type]),\n    onFocus: useCallback(function (event) {\n      state.focus(); // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n  };\n\n  var blur = state.blur,\n      change = state.change,\n      focus = state.focus,\n      value = state.value,\n      ignoreName = state.name,\n      otherState = _objectWithoutPropertiesLoose(state, [\"blur\", \"change\", \"focus\", \"value\", \"name\"]);\n\n  var meta = {\n    // this is to appease the Flow gods\n    active: otherState.active,\n    data: otherState.data,\n    dirty: otherState.dirty,\n    dirtySinceLastSubmit: otherState.dirtySinceLastSubmit,\n    error: otherState.error,\n    initial: otherState.initial,\n    invalid: otherState.invalid,\n    modified: otherState.modified,\n    pristine: otherState.pristine,\n    submitError: otherState.submitError,\n    submitFailed: otherState.submitFailed,\n    submitSucceeded: otherState.submitSucceeded,\n    submitting: otherState.submitting,\n    touched: otherState.touched,\n    valid: otherState.valid,\n    visited: otherState.visited\n  };\n\n  if (formatOnBlur) {\n    value = defaultFormat(value, name);\n  } else if (format) {\n    value = format(value, name);\n  }\n\n  if (value === null && !allowNull) {\n    value = '';\n  }\n\n  var input = _extends({\n    name: name,\n    value: value\n  }, handlers);\n\n  if (type === 'checkbox') {\n    input.type = type; // make sure it gets passed along to input\n\n    if (_value === undefined) {\n      input.checked = !!value;\n    } else {\n      input.checked = !!(Array.isArray(value) && ~value.indexOf(_value));\n      input.value = _value;\n    }\n  } else if (type === 'radio') {\n    input.type = type; // make sure it gets passed along to input\n\n    input.checked = value === _value;\n    input.value = _value;\n  } else if (component === 'select' && multiple) {\n    input.value = input.value || [];\n    input.multiple = true;\n  }\n\n  var renderProps = {\n    input: input,\n    meta: meta // assign to force Flow check\n\n  };\n  return renderProps;\n};\n\nvar Field = function Field(_ref) {\n  var allowNull = _ref.allowNull,\n      children = _ref.children,\n      component = _ref.component,\n      defaultValue = _ref.defaultValue,\n      format = _ref.format,\n      formatOnBlur = _ref.formatOnBlur,\n      initialValue = _ref.initialValue,\n      isEqual = _ref.isEqual,\n      multiple = _ref.multiple,\n      name = _ref.name,\n      parse = _ref.parse,\n      subscription = _ref.subscription,\n      type = _ref.type,\n      validate = _ref.validate,\n      validateFields = _ref.validateFields,\n      value = _ref.value,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"allowNull\", \"children\", \"component\", \"defaultValue\", \"format\", \"formatOnBlur\", \"initialValue\", \"isEqual\", \"multiple\", \"name\", \"parse\", \"subscription\", \"type\", \"validate\", \"validateFields\", \"value\"]);\n\n  var field = useField(name, {\n    allowNull: allowNull,\n    children: children,\n    component: component,\n    defaultValue: defaultValue,\n    format: format,\n    formatOnBlur: formatOnBlur,\n    initialValue: initialValue,\n    isEqual: isEqual,\n    multiple: multiple,\n    parse: parse,\n    subscription: subscription,\n    type: type,\n    validate: validate,\n    validateFields: validateFields,\n    value: value\n  });\n\n  if (typeof children === 'function') {\n    return children(_extends({}, field, rest));\n  }\n\n  if (typeof component === 'string') {\n    // ignore meta, combine input with any other props\n    return createElement(component, _extends({}, field.input, {\n      children: children\n    }, rest));\n  }\n\n  return renderComponent(_extends({}, field, {\n    children: children,\n    component: component\n  }, rest), \"Field(\" + name + \")\");\n};\n\nfunction useWhenValueChanges(value, callback, isEqual) {\n  if (isEqual === void 0) {\n    isEqual = function isEqual(a, b) {\n      return a === b;\n    };\n  }\n\n  var previous = React__default.useRef(value);\n  React__default.useEffect(function () {\n    if (!isEqual(value, previous.current)) {\n      callback();\n      previous.current = value;\n    }\n  });\n}\n/**\n * A simple hook to create a constant value that lives for\n * the lifetime of the component.\n *\n * Plagiarized from https://github.com/Andarist/use-constant\n *\n * Do NOT reuse this code unless you know what you're doing.\n * Use Andarist's hook; it's more fault tolerant to things like\n * falsy values.\n *\n * @param {Function} init - A function to generate the value\n */\n\n\nfunction useConstant(init) {\n  var ref = React__default.useRef();\n\n  if (!ref.current) {\n    ref.current = init();\n  }\n\n  return ref.current;\n}\n\nvar shallowEqual = function shallowEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== 'object' || !a || typeof b !== 'object' || !b) {\n    return false;\n  }\n\n  var keysA = Object.keys(a);\n  var keysB = Object.keys(b);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(b);\n\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key) || a[key] !== b[key]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar isSyntheticEvent = function isSyntheticEvent(candidate) {\n  return !!(candidate && typeof candidate.stopPropagation === 'function');\n};\n\nvar version = '4.1.0';\nvar versions = {\n  'final-form': version$1,\n  'react-final-form': version\n};\nvar all$1 = formSubscriptionItems.reduce(function (result, key) {\n  result[key] = true;\n  return result;\n}, {});\n\nvar ReactFinalForm = function ReactFinalForm(_ref) {\n  var debug = _ref.debug,\n      decorators = _ref.decorators,\n      destroyOnUnregister = _ref.destroyOnUnregister,\n      initialValues = _ref.initialValues,\n      initialValuesEqual = _ref.initialValuesEqual,\n      keepDirtyOnReinitialize = _ref.keepDirtyOnReinitialize,\n      mutators = _ref.mutators,\n      onSubmit = _ref.onSubmit,\n      subscription = _ref.subscription,\n      validate = _ref.validate,\n      validateOnBlur = _ref.validateOnBlur,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"debug\", \"decorators\", \"destroyOnUnregister\", \"initialValues\", \"initialValuesEqual\", \"keepDirtyOnReinitialize\", \"mutators\", \"onSubmit\", \"subscription\", \"validate\", \"validateOnBlur\"]);\n\n  var config = {\n    debug: debug,\n    destroyOnUnregister: destroyOnUnregister,\n    initialValues: initialValues,\n    keepDirtyOnReinitialize: keepDirtyOnReinitialize,\n    mutators: mutators,\n    onSubmit: onSubmit,\n    validate: validate,\n    validateOnBlur: validateOnBlur\n  };\n  var form = useConstant(function () {\n    var f = createForm(config);\n    f.pauseValidation();\n    return f;\n  }); // synchronously register and unregister to query form state for our subscription on first render\n\n  var _React$useState = useState(function () {\n    var initialState = {};\n    form.subscribe(function (state) {\n      initialState = state;\n    }, subscription || all$1)();\n    return initialState;\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  var flattenedSubscription = flattenSubscription(subscription || all$1);\n  useEffect(function () {\n    // We have rendered, so all fields are no registered, so we can unpause validation\n    form.isValidationPaused() && form.resumeValidation();\n    var unsubscriptions = [form.subscribe(function (s) {\n      if (!shallowEqual(s, state)) {\n        setState(s);\n      }\n    }, subscription || all$1)].concat(decorators ? decorators.map(function (decorator) {\n      return (// this noop ternary is to appease the flow gods\n        // istanbul ignore next\n        decorator(form)\n      );\n    }) : []);\n    return function () {\n      unsubscriptions.forEach(function (unsubscribe) {\n        return unsubscribe();\n      });\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [decorators].concat(flattenedSubscription)); // warn about decorator changes\n  // istanbul ignore next\n\n  if (process.env.NODE_ENV !== 'production') {\n    // You're never supposed to use hooks inside a conditional, but in this\n    // case we can be certain that you're not going to be changing your\n    // NODE_ENV between renders, so this is safe.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useWhenValueChanges(decorators, function () {\n      console.error('Warning: Form decorators should not change from one render to the next as new values will be ignored');\n    }, shallowEqual);\n  } // allow updatable config\n\n\n  useWhenValueChanges(debug, function () {\n    form.setConfig('debug', debug);\n  });\n  useWhenValueChanges(destroyOnUnregister, function () {\n    form.setConfig('destroyOnUnregister', destroyOnUnregister);\n  });\n  useWhenValueChanges(initialValues, function () {\n    form.setConfig('initialValues', initialValues);\n  }, initialValuesEqual || shallowEqual);\n  useWhenValueChanges(keepDirtyOnReinitialize, function () {\n    form.setConfig('keepDirtyOnReinitialize', keepDirtyOnReinitialize);\n  });\n  useWhenValueChanges(mutators, function () {\n    form.setConfig('mutators', mutators);\n  });\n  useWhenValueChanges(onSubmit, function () {\n    form.setConfig('onSubmit', onSubmit);\n  });\n  useWhenValueChanges(validate, function () {\n    form.setConfig('validate', validate);\n  });\n  useWhenValueChanges(validateOnBlur, function () {\n    form.setConfig('validateOnBlur', validateOnBlur);\n  });\n\n  var handleSubmit = function handleSubmit(event) {\n    if (event) {\n      // sometimes not true, e.g. React Native\n      if (typeof event.preventDefault === 'function') {\n        event.preventDefault();\n      }\n\n      if (typeof event.stopPropagation === 'function') {\n        // prevent any outer forms from receiving the event too\n        event.stopPropagation();\n      }\n    }\n\n    return form.submit();\n  };\n\n  var renderProps = _extends({}, state, {\n    form: _extends({}, form, {\n      reset: function reset(eventOrValues) {\n        if (isSyntheticEvent(eventOrValues)) {\n          // it's a React SyntheticEvent, call reset with no arguments\n          form.reset();\n        } else {\n          form.reset(eventOrValues);\n        }\n      }\n    }),\n    handleSubmit: handleSubmit\n  });\n\n  return createElement(ReactFinalFormContext.Provider, {\n    value: form\n  }, renderComponent(_extends({}, rest, renderProps, {\n    __versions: versions\n  }), 'ReactFinalForm'));\n};\n\nvar useFormState = function useFormState(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      onChange = _ref.onChange,\n      subscription = _ref.subscription;\n\n  var form = useForm('useFormState');\n  var firstRender = useRef(true); // synchronously register and unregister to query field state for our subscription on first render\n\n  var _React$useState = useState(function () {\n    var initialState = {};\n    form.subscribe(function (state) {\n      initialState = state;\n    }, subscription || all$1)();\n\n    if (onChange) {\n      onChange(initialState);\n    }\n\n    return initialState;\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  var flattenedSubscription = flattenSubscription(subscription || all$1);\n  useEffect(function () {\n    return form.subscribe(function (newState) {\n      if (firstRender.current) {\n        firstRender.current = false;\n      } else {\n        setState(newState);\n\n        if (onChange) {\n          onChange(newState);\n        }\n      }\n    }, subscription || all$1);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  flattenedSubscription);\n  return state;\n};\n\nvar FormSpy = function FormSpy(_ref) {\n  var onChange = _ref.onChange,\n      subscription = _ref.subscription,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"onChange\", \"subscription\"]);\n\n  var reactFinalForm = useContext(ReactFinalFormContext);\n\n  if (!reactFinalForm) {\n    throw new Error('Warning: FormSpy must be used inside of a ReactFinalForm component');\n  }\n\n  var state = useFormState({\n    onChange: onChange,\n    subscription: subscription\n  });\n\n  if (onChange) {\n    return null;\n  }\n\n  var renderProps = {\n    form: _extends({}, reactFinalForm, {\n      reset: function reset(eventOrValues) {\n        if (isSyntheticEvent(eventOrValues)) {\n          // it's a React SyntheticEvent, call reset with no arguments\n          reactFinalForm.reset();\n        } else {\n          reactFinalForm.reset(eventOrValues);\n        }\n      }\n    })\n  };\n  return renderComponent(_extends({}, rest, state, renderProps), 'FormSpy');\n};\n\nexport { Field, ReactFinalForm as Form, FormSpy, ReactFinalFormContext, ReactFinalFormContext as context, useField, useForm, useFormState, version };","map":null,"metadata":{},"sourceType":"module"}